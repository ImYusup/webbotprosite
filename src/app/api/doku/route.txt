//src/app/api/doku/route.ts
import { NextResponse } from "next/server";
import crypto from "crypto";

export async function POST(req: Request) {
  try {
    const body = await req.json();

    // üßæ Data DOKU
    const CLIENT_ID = process.env.DOKU_CLIENT_ID || "BRN-0216-1760006171895";
    const SECRET_KEY = process.env.DOKU_SECRET_KEY || "SK-yhosMUBjWBRZaihElVLB";
    const DOKU_API_URL = "https://api.doku.com/checkout/v1/payment"; // production endpoint

    const orderId = "ORDER-" + Date.now();
    const amount = Number(body.amount);
    const isoDate = new Date().toISOString();

    // üîπ Payload ke DOKU
    const payload = {
      order: {
        amount: amount,
        invoice_number: orderId,
        currency: "IDR",
      },
      customer: {
        name: body.name || "Guest",
        email: body.email || "guest@example.com",
      },
      payment: {
        payment_due_date: 60, // menit
        payment_method_types: ["QRIS", "VIRTUAL_ACCOUNT_BCA"],
      },
      additional_info: {
        callback_url: "https://webbotpro.site/payment/finish",
      },
    };

    // üîê Generate Signature (HARUS dari payload)
    const digest = crypto
      .createHash("sha256")
      .update(JSON.stringify(payload))
      .digest("base64");

    const signatureRaw =
      `Client-Id:${CLIENT_ID}\n` +
      `Request-Id:${orderId}\n` +
      `Request-Timestamp:${isoDate}\n` +
      `Request-Target:/checkout/v1/payment\n` +
      `Digest:${digest}`;

    const signature = crypto
      .createHmac("sha256", SECRET_KEY)
      .update(signatureRaw)
      .digest("base64");

    console.log("üîë Signature generated:", signature);

    const res = await fetch(DOKU_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Client-Id": CLIENT_ID,
        "Request-Id": orderId,
        "Request-Timestamp": isoDate,
        Signature: "HMACSHA256=" + signature,
      },
      body: JSON.stringify(payload),
    });

    const data = await res.json();

    if (!res.ok) {
      console.error("‚ùå DOKU Error:", data);
      return NextResponse.json(
        { error: data.message || "DOKU API Error", response: data },
        { status: res.status }
      );
    }

    console.log("‚úÖ DOKU Response:", data);

    return NextResponse.json({
      success: true,
      order_id: orderId,
      checkout_url: data.response?.payment?.url || null,
      response: data,
    });
  } catch (err: any) {
    console.error("‚ùå DOKU createTransaction error:", err);
    return NextResponse.json(
      { error: err.message || "Something went wrong" },
      { status: 500 }
    );
  }
}